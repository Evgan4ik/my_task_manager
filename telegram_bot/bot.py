import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from django.core.management.base import BaseCommand
from asgiref.sync import sync_to_async
from tasks.models import Task

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv('TELEGRAM_TOKEN'))
dp = Dispatcher(storage=MemoryStorage())


class TaskActions(StatesGroup):
    choosing_task = State()
    choosing_field = State()
    editing_title = State()
    editing_description = State()
    editing_deadline = State()
    new_task_title = State()
    new_task_description = State()
    new_task_deadline = State()


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏
async_get_tasks = sync_to_async(lambda: list(Task.objects.all().order_by('-created_at')))
async_get_task = sync_to_async(Task.objects.get)
async_save_task = sync_to_async(lambda task: task.save())
async_delete_task = sync_to_async(lambda task: task.delete())


async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="/tasks", description="–ú–æ–∏ –∑–∞–¥–∞—á–∏"),
        types.BotCommand(command="/newtask", description="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
    ]
    await bot.set_my_commands(commands)


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üìã Task Manager Bot\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/tasks - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á\n"
        "/newtask - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"
    )


@dp.message(Command("tasks"))
async def list_tasks(message: types.Message, state: FSMContext):
    tasks = await async_get_tasks()

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")
        return

    builder = InlineKeyboardBuilder()
    for task in tasks:
        status = "‚úÖ" if task.is_completed else "üïí"
        builder.button(
            text=f"{status} {task.title}",
            callback_data=f"view_{task.id}"
        )

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    builder.adjust(1)

    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(TaskActions.choosing_task)


@dp.callback_query(TaskActions.choosing_task, lambda c: c.data.startswith("view_"))
async def view_task(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    task = await async_get_task(id=task_id)

    text = (
        f"üìå –ó–∞–¥–∞—á–∞ #{task.id}\n\n"
        f"üîñ –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y') if task.deadline else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.is_completed else '–≤ —Ä–∞–±–æ—Ç–µ'}"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_task_{task.id}")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task.id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.update_data(current_task_id=task_id)


@dp.callback_query(lambda c: c.data.startswith("edit_task_"))
async def edit_task_handler(callback: types.CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[2])
    await state.update_data(current_task_id=task_id)

    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{task_id}")
    builder.button(text="üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{task_id}")
    builder.button(text="üìÖ –î–µ–¥–ª–∞–π–Ω", callback_data=f"edit_deadline_{task_id}")
    builder.button(text="‚úÖ –°—Ç–∞—Ç—É—Å", callback_data=f"edit_status_{task_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(2)

    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(TaskActions.choosing_field)


@dp.callback_query(TaskActions.choosing_field, lambda c: any(
    c.data.startswith(prefix) for prefix in [
        "edit_title_",
        "edit_desc_",
        "edit_deadline_",
        "edit_status_"
    ]
))
async def process_field_choice(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    action_type = parts[1]
    task_id = int(parts[2])

    if action_type == "title":
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        await state.set_state(TaskActions.editing_title)

    elif action_type == "desc":
        await callback.message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        await state.set_state(TaskActions.editing_description)

    elif action_type == "deadline":
        await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–¥–¥.–º–º.–≥–≥–≥–≥):")
        await state.set_state(TaskActions.editing_deadline)

    elif action_type == "status":
        task = await async_get_task(id=task_id)
        task.is_completed = not task.is_completed
        await async_save_task(task)
        await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' if task.is_completed else '–≤ —Ä–∞–±–æ—Ç–µ'}")
        await list_tasks(callback.message, state)

    await state.update_data(current_task_id=task_id)
    await callback.answer()


@dp.message(TaskActions.editing_title)
async def process_title_edit(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task = await async_get_task(id=data['current_task_id'])
    task.title = message.text
    await async_save_task(task)
    await message.answer("üìù –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    await list_tasks(message, state)


@dp.message(TaskActions.editing_description)
async def process_description_edit(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task = await async_get_task(id=data['current_task_id'])
    task.description = message.text
    await async_save_task(task)
    await message.answer("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    await list_tasks(message, state)


@dp.message(TaskActions.editing_deadline)
async def process_deadline_edit(message: types.Message, state: FSMContext):
    try:
        deadline = datetime.strptime(message.text, "%d.%m.%Y")
        data = await state.get_data()
        task = await async_get_task(id=data['current_task_id'])
        task.deadline = deadline
        await async_save_task(task)
        await message.answer("üìÖ –î–µ–¥–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    finally:
        await state.clear()
        await list_tasks(message, state)


@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_task(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    task = await async_get_task(id=task_id)
    await async_delete_task(task)
    await callback.message.answer("üóë –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    await list_tasks(callback.message, state=None)


@dp.callback_query(lambda c: c.data == "back")
async def back_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await list_tasks(callback.message, state)


@dp.callback_query(lambda c: c.data == "cancel")
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@dp.message(Command("newtask"))
async def create_new_task(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskActions.new_task_title)


@dp.message(TaskActions.new_task_title)
async def process_new_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(TaskActions.new_task_description)


@dp.message(TaskActions.new_task_description)
async def process_new_description(message: types.Message, state: FSMContext):
    description = message.text if message.text != "-" else None
    await state.update_data(description=description)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(TaskActions.new_task_deadline)


@dp.message(TaskActions.new_task_deadline)
async def process_new_deadline(message: types.Message, state: FSMContext):
    data = await state.get_data()
    deadline = None

    try:
        if message.text != "-":
            deadline = datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    new_task = Task(
        title=data['title'],
        description=data['description'],
        deadline=deadline,
        created_at=datetime.now(),
        is_completed=False
    )

    await sync_to_async(new_task.save)()
    await message.answer("‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    await state.clear()


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞'

    def handle(self, *args, **options):
        asyncio.run(self._start_bot())

    async def _start_bot(self):
        await set_commands(bot)
        await dp.start_polling(bot)